{"ast":null,"code":"// @ is an alias to /src\nimport HelloWorld from \"@/components/HelloWorld.vue\";\nimport { QrcodeStream, QrcodeDropZone, QrcodeCapture } from \"vue-qrcode-reader\";\nexport default {\n  name: \"HomeView\",\n  data() {\n    return {\n      scan: false,\n      error: \"\"\n    };\n  },\n  components: {\n    HelloWorld,\n    QrcodeStream\n    // QrcodeDropZone,\n    // QrcodeCapture,\n  },\n\n  methods: {\n    onDecode(decodedString) {\n      // ...\n      console.log(decodedString);\n      this.scan = false;\n    },\n    async onInit(promise) {\n      try {\n        await promise;\n      } catch (error) {\n        if (error.name === \"NotAllowedError\") {\n          this.error = \"ERROR: you need to grant camera access permission\";\n        } else if (error.name === \"NotFoundError\") {\n          this.error = \"ERROR: no camera on this device\";\n        } else if (error.name === \"NotSupportedError\") {\n          this.error = \"ERROR: secure context required (HTTPS, localhost)\";\n        } else if (error.name === \"NotReadableError\") {\n          this.error = \"ERROR: is the camera already in use?\";\n        } else if (error.name === \"OverconstrainedError\") {\n          this.error = \"ERROR: installed cameras are not suitable\";\n        } else if (error.name === \"StreamApiNotSupportedError\") {\n          this.error = \"ERROR: Stream API is not supported in this browser\";\n        } else if (error.name === \"InsecureContextError\") {\n          this.error = \"ERROR: Camera access is only permitted in secure context. Use HTTPS or localhost rather than HTTP.\";\n        } else {\n          this.error = `ERROR: Camera error (${error.name})`;\n        }\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"AAUA;AACA;AACA;AAEA;EACAA;EACAC;IACA;MACAC;MACAC;IACA;EACA;EACAC;IACAC;IACAC;IACA;IACA;EACA;;EACAC;IACAC;MACA;MACAC;MACA;IACA;IACA;MACA;QACA;MACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA,aACA;QACA;UACA;QACA;MACA;IACA;EACA;AACA","names":["name","data","scan","error","components","HelloWorld","QrcodeStream","methods","onDecode","console"],"sourceRoot":"src/views","sources":["HomeView.vue"],"sourcesContent":["<template>\n  <div class=\"home\">\n    <img alt=\"Vue logo\" src=\"../assets/logo.png\" />\n    <HelloWorld msg=\"Welcome to Your Vue.js App\" />\n    <button @click=\"scan = !scan\">Scan</button>\n    <qrcode-stream @init=\"onInit\" @decode=\"onDecode\"></qrcode-stream>\n  </div>\n</template>\n\n<script>\n// @ is an alias to /src\nimport HelloWorld from \"@/components/HelloWorld.vue\";\nimport { QrcodeStream, QrcodeDropZone, QrcodeCapture } from \"vue-qrcode-reader\";\n\nexport default {\n  name: \"HomeView\",\n  data() {\n    return {\n      scan: false,\n      error: \"\",\n    };\n  },\n  components: {\n    HelloWorld,\n    QrcodeStream,\n    // QrcodeDropZone,\n    // QrcodeCapture,\n  },\n  methods: {\n    onDecode(decodedString) {\n      // ...\n      console.log(decodedString);\n      this.scan = false;\n    },\n    async onInit(promise) {\n      try {\n        await promise;\n      } catch (error) {\n        if (error.name === \"NotAllowedError\") {\n          this.error = \"ERROR: you need to grant camera access permission\";\n        } else if (error.name === \"NotFoundError\") {\n          this.error = \"ERROR: no camera on this device\";\n        } else if (error.name === \"NotSupportedError\") {\n          this.error = \"ERROR: secure context required (HTTPS, localhost)\";\n        } else if (error.name === \"NotReadableError\") {\n          this.error = \"ERROR: is the camera already in use?\";\n        } else if (error.name === \"OverconstrainedError\") {\n          this.error = \"ERROR: installed cameras are not suitable\";\n        } else if (error.name === \"StreamApiNotSupportedError\") {\n          this.error = \"ERROR: Stream API is not supported in this browser\";\n        } else if (error.name === \"InsecureContextError\") {\n          this.error =\n            \"ERROR: Camera access is only permitted in secure context. Use HTTPS or localhost rather than HTTP.\";\n        } else {\n          this.error = `ERROR: Camera error (${error.name})`;\n        }\n      }\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}